// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"restent/ent/cate"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Cate is the model entity for the Cate schema.
type Cate struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CateQuery when eager-loading is set.
	Edges CateEdges `json:"edges"`
}

// CateEdges holds the relations/edges for other nodes in the graph.
type CateEdges struct {
	// Blogs holds the value of the blogs edge.
	Blogs []*Blog `json:"blogs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BlogsOrErr returns the Blogs value or an error if the edge
// was not loaded in eager-loading.
func (e CateEdges) BlogsOrErr() ([]*Blog, error) {
	if e.loadedTypes[0] {
		return e.Blogs, nil
	}
	return nil, &NotLoadedError{edge: "blogs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cate) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cate.FieldName:
			values[i] = new(sql.NullString)
		case cate.FieldCreatedAt, cate.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case cate.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Cate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cate fields.
func (c *Cate) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case cate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = new(time.Time)
				*c.CreatedAt = value.Time
			}
		case cate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = new(time.Time)
				*c.UpdatedAt = value.Time
			}
		case cate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		}
	}
	return nil
}

// QueryBlogs queries the "blogs" edge of the Cate entity.
func (c *Cate) QueryBlogs() *BlogQuery {
	return (&CateClient{config: c.config}).QueryBlogs(c)
}

// Update returns a builder for updating this Cate.
// Note that you need to call Cate.Unwrap() before calling this method if this Cate
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cate) Update() *CateUpdateOne {
	return (&CateClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Cate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cate) Unwrap() *Cate {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cate is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cate) String() string {
	var builder strings.Builder
	builder.WriteString("Cate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	if v := c.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := c.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Cates is a parsable slice of Cate.
type Cates []*Cate

func (c Cates) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
