// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"restent/ent/blog"
	"restent/ent/comment"
	"restent/ent/user"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Comment is the model entity for the Comment schema.
type Comment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommentQuery when eager-loading is set.
	Edges           CommentEdges `json:"edges"`
	blog_comments   *uuid.UUID
	comment_replies *uuid.UUID
	user_comments   *uuid.UUID
}

// CommentEdges holds the relations/edges for other nodes in the graph.
type CommentEdges struct {
	// Writer holds the value of the writer edge.
	Writer *User `json:"writer,omitempty"`
	// ReplyTo holds the value of the reply_to edge.
	ReplyTo *Comment `json:"reply_to,omitempty"`
	// Replies holds the value of the replies edge.
	Replies []*Comment `json:"replies,omitempty"`
	// Belongto holds the value of the belongto edge.
	Belongto *Blog `json:"belongto,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// WriterOrErr returns the Writer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) WriterOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Writer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Writer, nil
	}
	return nil, &NotLoadedError{edge: "writer"}
}

// ReplyToOrErr returns the ReplyTo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) ReplyToOrErr() (*Comment, error) {
	if e.loadedTypes[1] {
		if e.ReplyTo == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: comment.Label}
		}
		return e.ReplyTo, nil
	}
	return nil, &NotLoadedError{edge: "reply_to"}
}

// RepliesOrErr returns the Replies value or an error if the edge
// was not loaded in eager-loading.
func (e CommentEdges) RepliesOrErr() ([]*Comment, error) {
	if e.loadedTypes[2] {
		return e.Replies, nil
	}
	return nil, &NotLoadedError{edge: "replies"}
}

// BelongtoOrErr returns the Belongto value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) BelongtoOrErr() (*Blog, error) {
	if e.loadedTypes[3] {
		if e.Belongto == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: blog.Label}
		}
		return e.Belongto, nil
	}
	return nil, &NotLoadedError{edge: "belongto"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Comment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case comment.FieldContent:
			values[i] = new(sql.NullString)
		case comment.FieldCreatedAt, comment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case comment.FieldID:
			values[i] = new(uuid.UUID)
		case comment.ForeignKeys[0]: // blog_comments
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case comment.ForeignKeys[1]: // comment_replies
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case comment.ForeignKeys[2]: // user_comments
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Comment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Comment fields.
func (c *Comment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case comment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case comment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = new(time.Time)
				*c.CreatedAt = value.Time
			}
		case comment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = new(time.Time)
				*c.UpdatedAt = value.Time
			}
		case comment.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				c.Content = value.String
			}
		case comment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field blog_comments", values[i])
			} else if value.Valid {
				c.blog_comments = new(uuid.UUID)
				*c.blog_comments = *value.S.(*uuid.UUID)
			}
		case comment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field comment_replies", values[i])
			} else if value.Valid {
				c.comment_replies = new(uuid.UUID)
				*c.comment_replies = *value.S.(*uuid.UUID)
			}
		case comment.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_comments", values[i])
			} else if value.Valid {
				c.user_comments = new(uuid.UUID)
				*c.user_comments = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryWriter queries the "writer" edge of the Comment entity.
func (c *Comment) QueryWriter() *UserQuery {
	return (&CommentClient{config: c.config}).QueryWriter(c)
}

// QueryReplyTo queries the "reply_to" edge of the Comment entity.
func (c *Comment) QueryReplyTo() *CommentQuery {
	return (&CommentClient{config: c.config}).QueryReplyTo(c)
}

// QueryReplies queries the "replies" edge of the Comment entity.
func (c *Comment) QueryReplies() *CommentQuery {
	return (&CommentClient{config: c.config}).QueryReplies(c)
}

// QueryBelongto queries the "belongto" edge of the Comment entity.
func (c *Comment) QueryBelongto() *BlogQuery {
	return (&CommentClient{config: c.config}).QueryBelongto(c)
}

// Update returns a builder for updating this Comment.
// Note that you need to call Comment.Unwrap() before calling this method if this Comment
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Comment) Update() *CommentUpdateOne {
	return (&CommentClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Comment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Comment) Unwrap() *Comment {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Comment is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Comment) String() string {
	var builder strings.Builder
	builder.WriteString("Comment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	if v := c.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := c.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(c.Content)
	builder.WriteByte(')')
	return builder.String()
}

// Comments is a parsable slice of Comment.
type Comments []*Comment

func (c Comments) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
